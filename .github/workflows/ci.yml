# ci.yml — v2025-10-20a
# Mirrors ajv_manual.yml fixes: Node 20, ajv-cli + ajv-formats, globstar, de-dup + preloaded refs
# Also (optionally) runs Node .mjs steps if present, without breaking if they’re absent.

name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # If you keep project-level devDeps (ajv, ajv-formats, etc.) in root package.json,
      # this will install them using the root package-lock.json
      - name: Install deps
        run: npm ci

      # Keep your ajv-cli-based schema compilation (same behavior as ajv_manual.yml)
      - name: Install ajv-cli and formats
        run: |
          npm i -g ajv-cli@5 ajv-formats@3

      - name: Debug env
        run: |
          node -v
          npm -v
          ajv --version || true
          pwd
          ls -la

      - name: Validate all JSON Schemas (if present)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar

          # Collect schema candidates from common repo layouts
          declare -a RAW
          RAW+=(schemas/**/*.json)
          RAW+=(schemas/*.json)
          RAW+=(packages/**/json/schemas/**/*.json)
          RAW+=(packages/**/json/schemas/*.json)

          # De-duplicate the list
          declare -A SEEN=()
          declare -a SCHEMAS=()
          for f in "${RAW[@]}"; do
            if [[ -z "${SEEN["$f"]+x}" ]]; then
              SEEN["$f"]=1
              SCHEMAS+=("$f")
            fi
          done

          echo "Found ${#SCHEMAS[@]} unique schema file(s)."
          if [ ${#SCHEMAS[@]} -eq 0 ]; then
            echo "No JSON Schemas found; skipping."
            exit 0
          fi

          # Compile each schema with all other schemas preloaded as refs,
          # avoiding duplicate loads of the current schema
          fail=0
          for s in "${SCHEMAS[@]}"; do
            echo "Compiling $s"
            REF_ARGS=()
            for r in "${SCHEMAS[@]}"; do
              [[ "$r" != "$s" ]] && REF_ARGS+=(-r "$r")
            done
            if ! ajv compile -s "$s" "${REF_ARGS[@]}" -c ajv-formats --spec=draft2020; then
              echo "Failed: $s"
              fail=1
            fi
          done

          if [ "$fail" -ne 0 ]; then
            echo "One or more schemas failed to compile."
            exit 1
          fi

          echo "All schemas compiled successfully."

      # ---- Optional Node build/validate steps (kept but guarded) ----
      # These run ONLY if the .mjs files exist, so CI won’t break if not present.

      - name: Build schemas via Node script (if present)
        if: ${{ hashFiles('tools/build-schemas.mjs') != '' }}
        run: node tools/build-schemas.mjs

      - name: Validate samples via Node script (if present)
        if: ${{ hashFiles('tools/validate-with-ajc.mjs') != '' }}
        run: node tools/validate-with-ajc.mjs
      # ----------------------------------------------------------------

